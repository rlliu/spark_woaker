/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.spark.cloud.coresvc.api.woaker;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WorkApi {

  public interface Iface {

    public String getWorkLogList(String userId, String keyWord, String startDate, String endDate, boolean isDelete, int page, int limit) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getWorkLogList(String userId, String keyWord, String startDate, String endDate, boolean isDelete, int page, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String getWorkLogList(String userId, String keyWord, String startDate, String endDate, boolean isDelete, int page, int limit) throws org.apache.thrift.TException
    {
      send_getWorkLogList(userId, keyWord, startDate, endDate, isDelete, page, limit);
      return recv_getWorkLogList();
    }

    public void send_getWorkLogList(String userId, String keyWord, String startDate, String endDate, boolean isDelete, int page, int limit) throws org.apache.thrift.TException
    {
      getWorkLogList_args args = new getWorkLogList_args();
      args.setUserId(userId);
      args.setKeyWord(keyWord);
      args.setStartDate(startDate);
      args.setEndDate(endDate);
      args.setIsDelete(isDelete);
      args.setPage(page);
      args.setLimit(limit);
      sendBase("getWorkLogList", args);
    }

    public String recv_getWorkLogList() throws org.apache.thrift.TException
    {
      getWorkLogList_result result = new getWorkLogList_result();
      receiveBase(result, "getWorkLogList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWorkLogList failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getWorkLogList(String userId, String keyWord, String startDate, String endDate, boolean isDelete, int page, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWorkLogList_call method_call = new getWorkLogList_call(userId, keyWord, startDate, endDate, isDelete, page, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWorkLogList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId;
      private String keyWord;
      private String startDate;
      private String endDate;
      private boolean isDelete;
      private int page;
      private int limit;
      public getWorkLogList_call(String userId, String keyWord, String startDate, String endDate, boolean isDelete, int page, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.keyWord = keyWord;
        this.startDate = startDate;
        this.endDate = endDate;
        this.isDelete = isDelete;
        this.page = page;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWorkLogList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWorkLogList_args args = new getWorkLogList_args();
        args.setUserId(userId);
        args.setKeyWord(keyWord);
        args.setStartDate(startDate);
        args.setEndDate(endDate);
        args.setIsDelete(isDelete);
        args.setPage(page);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWorkLogList();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getWorkLogList", new getWorkLogList());
      return processMap;
    }

    public static class getWorkLogList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWorkLogList_args> {
      public getWorkLogList() {
        super("getWorkLogList");
      }

      public getWorkLogList_args getEmptyArgsInstance() {
        return new getWorkLogList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWorkLogList_result getResult(I iface, getWorkLogList_args args) throws org.apache.thrift.TException {
        getWorkLogList_result result = new getWorkLogList_result();
        result.success = iface.getWorkLogList(args.userId, args.keyWord, args.startDate, args.endDate, args.isDelete, args.page, args.limit);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getWorkLogList", new getWorkLogList());
      return processMap;
    }

    public static class getWorkLogList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWorkLogList_args, String> {
      public getWorkLogList() {
        super("getWorkLogList");
      }

      public getWorkLogList_args getEmptyArgsInstance() {
        return new getWorkLogList_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getWorkLogList_result result = new getWorkLogList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWorkLogList_result result = new getWorkLogList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWorkLogList_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getWorkLogList(args.userId, args.keyWord, args.startDate, args.endDate, args.isDelete, args.page, args.limit,resultHandler);
      }
    }

  }

  public static class getWorkLogList_args implements org.apache.thrift.TBase<getWorkLogList_args, getWorkLogList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWorkLogList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWorkLogList_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("keyWord", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField IS_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField("isDelete", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWorkLogList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWorkLogList_argsTupleSchemeFactory());
    }

    public String userId; // required
    public String keyWord; // required
    public String startDate; // required
    public String endDate; // required
    public boolean isDelete; // required
    public int page; // required
    public int limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      KEY_WORD((short)2, "keyWord"),
      START_DATE((short)3, "startDate"),
      END_DATE((short)4, "endDate"),
      IS_DELETE((short)5, "isDelete"),
      PAGE((short)6, "page"),
      LIMIT((short)7, "limit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // KEY_WORD
            return KEY_WORD;
          case 3: // START_DATE
            return START_DATE;
          case 4: // END_DATE
            return END_DATE;
          case 5: // IS_DELETE
            return IS_DELETE;
          case 6: // PAGE
            return PAGE;
          case 7: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISDELETE_ISSET_ID = 0;
    private static final int __PAGE_ISSET_ID = 1;
    private static final int __LIMIT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY_WORD, new org.apache.thrift.meta_data.FieldMetaData("keyWord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_DELETE, new org.apache.thrift.meta_data.FieldMetaData("isDelete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWorkLogList_args.class, metaDataMap);
    }

    public getWorkLogList_args() {
    }

    public getWorkLogList_args(
      String userId,
      String keyWord,
      String startDate,
      String endDate,
      boolean isDelete,
      int page,
      int limit)
    {
      this();
      this.userId = userId;
      this.keyWord = keyWord;
      this.startDate = startDate;
      this.endDate = endDate;
      this.isDelete = isDelete;
      setIsDeleteIsSet(true);
      this.page = page;
      setPageIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWorkLogList_args(getWorkLogList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetKeyWord()) {
        this.keyWord = other.keyWord;
      }
      if (other.isSetStartDate()) {
        this.startDate = other.startDate;
      }
      if (other.isSetEndDate()) {
        this.endDate = other.endDate;
      }
      this.isDelete = other.isDelete;
      this.page = other.page;
      this.limit = other.limit;
    }

    public getWorkLogList_args deepCopy() {
      return new getWorkLogList_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.keyWord = null;
      this.startDate = null;
      this.endDate = null;
      setIsDeleteIsSet(false);
      this.isDelete = false;
      setPageIsSet(false);
      this.page = 0;
      setLimitIsSet(false);
      this.limit = 0;
    }

    public String getUserId() {
      return this.userId;
    }

    public getWorkLogList_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public String getKeyWord() {
      return this.keyWord;
    }

    public getWorkLogList_args setKeyWord(String keyWord) {
      this.keyWord = keyWord;
      return this;
    }

    public void unsetKeyWord() {
      this.keyWord = null;
    }

    /** Returns true if field keyWord is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyWord() {
      return this.keyWord != null;
    }

    public void setKeyWordIsSet(boolean value) {
      if (!value) {
        this.keyWord = null;
      }
    }

    public String getStartDate() {
      return this.startDate;
    }

    public getWorkLogList_args setStartDate(String startDate) {
      this.startDate = startDate;
      return this;
    }

    public void unsetStartDate() {
      this.startDate = null;
    }

    /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
    public boolean isSetStartDate() {
      return this.startDate != null;
    }

    public void setStartDateIsSet(boolean value) {
      if (!value) {
        this.startDate = null;
      }
    }

    public String getEndDate() {
      return this.endDate;
    }

    public getWorkLogList_args setEndDate(String endDate) {
      this.endDate = endDate;
      return this;
    }

    public void unsetEndDate() {
      this.endDate = null;
    }

    /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
    public boolean isSetEndDate() {
      return this.endDate != null;
    }

    public void setEndDateIsSet(boolean value) {
      if (!value) {
        this.endDate = null;
      }
    }

    public boolean isIsDelete() {
      return this.isDelete;
    }

    public getWorkLogList_args setIsDelete(boolean isDelete) {
      this.isDelete = isDelete;
      setIsDeleteIsSet(true);
      return this;
    }

    public void unsetIsDelete() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISDELETE_ISSET_ID);
    }

    /** Returns true if field isDelete is set (has been assigned a value) and false otherwise */
    public boolean isSetIsDelete() {
      return EncodingUtils.testBit(__isset_bitfield, __ISDELETE_ISSET_ID);
    }

    public void setIsDeleteIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISDELETE_ISSET_ID, value);
    }

    public int getPage() {
      return this.page;
    }

    public getWorkLogList_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getLimit() {
      return this.limit;
    }

    public getWorkLogList_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case KEY_WORD:
        if (value == null) {
          unsetKeyWord();
        } else {
          setKeyWord((String)value);
        }
        break;

      case START_DATE:
        if (value == null) {
          unsetStartDate();
        } else {
          setStartDate((String)value);
        }
        break;

      case END_DATE:
        if (value == null) {
          unsetEndDate();
        } else {
          setEndDate((String)value);
        }
        break;

      case IS_DELETE:
        if (value == null) {
          unsetIsDelete();
        } else {
          setIsDelete((Boolean)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case KEY_WORD:
        return getKeyWord();

      case START_DATE:
        return getStartDate();

      case END_DATE:
        return getEndDate();

      case IS_DELETE:
        return Boolean.valueOf(isIsDelete());

      case PAGE:
        return Integer.valueOf(getPage());

      case LIMIT:
        return Integer.valueOf(getLimit());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case KEY_WORD:
        return isSetKeyWord();
      case START_DATE:
        return isSetStartDate();
      case END_DATE:
        return isSetEndDate();
      case IS_DELETE:
        return isSetIsDelete();
      case PAGE:
        return isSetPage();
      case LIMIT:
        return isSetLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWorkLogList_args)
        return this.equals((getWorkLogList_args)that);
      return false;
    }

    public boolean equals(getWorkLogList_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_keyWord = true && this.isSetKeyWord();
      boolean that_present_keyWord = true && that.isSetKeyWord();
      if (this_present_keyWord || that_present_keyWord) {
        if (!(this_present_keyWord && that_present_keyWord))
          return false;
        if (!this.keyWord.equals(that.keyWord))
          return false;
      }

      boolean this_present_startDate = true && this.isSetStartDate();
      boolean that_present_startDate = true && that.isSetStartDate();
      if (this_present_startDate || that_present_startDate) {
        if (!(this_present_startDate && that_present_startDate))
          return false;
        if (!this.startDate.equals(that.startDate))
          return false;
      }

      boolean this_present_endDate = true && this.isSetEndDate();
      boolean that_present_endDate = true && that.isSetEndDate();
      if (this_present_endDate || that_present_endDate) {
        if (!(this_present_endDate && that_present_endDate))
          return false;
        if (!this.endDate.equals(that.endDate))
          return false;
      }

      boolean this_present_isDelete = true;
      boolean that_present_isDelete = true;
      if (this_present_isDelete || that_present_isDelete) {
        if (!(this_present_isDelete && that_present_isDelete))
          return false;
        if (this.isDelete != that.isDelete)
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWorkLogList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeyWord()).compareTo(other.isSetKeyWord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyWord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyWord, other.keyWord);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(other.isSetStartDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsDelete()).compareTo(other.isSetIsDelete());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsDelete()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDelete, other.isDelete);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWorkLogList_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keyWord:");
      if (this.keyWord == null) {
        sb.append("null");
      } else {
        sb.append(this.keyWord);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startDate:");
      if (this.startDate == null) {
        sb.append("null");
      } else {
        sb.append(this.startDate);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endDate:");
      if (this.endDate == null) {
        sb.append("null");
      } else {
        sb.append(this.endDate);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isDelete:");
      sb.append(this.isDelete);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWorkLogList_argsStandardSchemeFactory implements SchemeFactory {
      public getWorkLogList_argsStandardScheme getScheme() {
        return new getWorkLogList_argsStandardScheme();
      }
    }

    private static class getWorkLogList_argsStandardScheme extends StandardScheme<getWorkLogList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWorkLogList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY_WORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keyWord = iprot.readString();
                struct.setKeyWordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startDate = iprot.readString();
                struct.setStartDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endDate = iprot.readString();
                struct.setEndDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // IS_DELETE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isDelete = iprot.readBool();
                struct.setIsDeleteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWorkLogList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.keyWord != null) {
          oprot.writeFieldBegin(KEY_WORD_FIELD_DESC);
          oprot.writeString(struct.keyWord);
          oprot.writeFieldEnd();
        }
        if (struct.startDate != null) {
          oprot.writeFieldBegin(START_DATE_FIELD_DESC);
          oprot.writeString(struct.startDate);
          oprot.writeFieldEnd();
        }
        if (struct.endDate != null) {
          oprot.writeFieldBegin(END_DATE_FIELD_DESC);
          oprot.writeString(struct.endDate);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_DELETE_FIELD_DESC);
        oprot.writeBool(struct.isDelete);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWorkLogList_argsTupleSchemeFactory implements SchemeFactory {
      public getWorkLogList_argsTupleScheme getScheme() {
        return new getWorkLogList_argsTupleScheme();
      }
    }

    private static class getWorkLogList_argsTupleScheme extends TupleScheme<getWorkLogList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWorkLogList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetKeyWord()) {
          optionals.set(1);
        }
        if (struct.isSetStartDate()) {
          optionals.set(2);
        }
        if (struct.isSetEndDate()) {
          optionals.set(3);
        }
        if (struct.isSetIsDelete()) {
          optionals.set(4);
        }
        if (struct.isSetPage()) {
          optionals.set(5);
        }
        if (struct.isSetLimit()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetKeyWord()) {
          oprot.writeString(struct.keyWord);
        }
        if (struct.isSetStartDate()) {
          oprot.writeString(struct.startDate);
        }
        if (struct.isSetEndDate()) {
          oprot.writeString(struct.endDate);
        }
        if (struct.isSetIsDelete()) {
          oprot.writeBool(struct.isDelete);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWorkLogList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.keyWord = iprot.readString();
          struct.setKeyWordIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startDate = iprot.readString();
          struct.setStartDateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endDate = iprot.readString();
          struct.setEndDateIsSet(true);
        }
        if (incoming.get(4)) {
          struct.isDelete = iprot.readBool();
          struct.setIsDeleteIsSet(true);
        }
        if (incoming.get(5)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(6)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
      }
    }

  }

  public static class getWorkLogList_result implements org.apache.thrift.TBase<getWorkLogList_result, getWorkLogList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWorkLogList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWorkLogList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWorkLogList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWorkLogList_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWorkLogList_result.class, metaDataMap);
    }

    public getWorkLogList_result() {
    }

    public getWorkLogList_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWorkLogList_result(getWorkLogList_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getWorkLogList_result deepCopy() {
      return new getWorkLogList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getWorkLogList_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWorkLogList_result)
        return this.equals((getWorkLogList_result)that);
      return false;
    }

    public boolean equals(getWorkLogList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWorkLogList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWorkLogList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWorkLogList_resultStandardSchemeFactory implements SchemeFactory {
      public getWorkLogList_resultStandardScheme getScheme() {
        return new getWorkLogList_resultStandardScheme();
      }
    }

    private static class getWorkLogList_resultStandardScheme extends StandardScheme<getWorkLogList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWorkLogList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWorkLogList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWorkLogList_resultTupleSchemeFactory implements SchemeFactory {
      public getWorkLogList_resultTupleScheme getScheme() {
        return new getWorkLogList_resultTupleScheme();
      }
    }

    private static class getWorkLogList_resultTupleScheme extends TupleScheme<getWorkLogList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWorkLogList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWorkLogList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
