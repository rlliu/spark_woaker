/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.spark.cloud.coresvc.dto;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

/**
 * Page Dto
 */
public class PageDto implements org.apache.thrift.TBase<PageDto, PageDto._Fields>, java.io.Serializable, Cloneable, Comparable<PageDto>
{
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PageDto");

    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit",
            org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField SKIP_FIELD_DESC = new org.apache.thrift.protocol.TField("skip",
            org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField NEED_DATA_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("needDataList",
            org.apache.thrift.protocol.TType.BOOL, (short) 3);
    private static final org.apache.thrift.protocol.TField NEED_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("needTotal",
            org.apache.thrift.protocol.TType.BOOL, (short) 4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static
    {
        schemes.put(StandardScheme.class, new PageDtoStandardSchemeFactory());
        schemes.put(TupleScheme.class, new PageDtoTupleSchemeFactory());
    }

    public int limit; // optional
    public int skip; // optional
    public boolean needDataList; // optional
    public boolean needTotal; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum
    {
        LIMIT((short) 1, "limit"), SKIP((short) 2, "skip"), NEED_DATA_LIST((short) 3, "needDataList"), NEED_TOTAL((short) 4, "needTotal");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static
        {
            for (_Fields field : EnumSet.allOf(_Fields.class))
            {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId)
        {
            switch (fieldId)
            {
                case 1: // LIMIT
                    return LIMIT;
                case 2: // SKIP
                    return SKIP;
                case 3: // NEED_DATA_LIST
                    return NEED_DATA_LIST;
                case 4: // NEED_TOTAL
                    return NEED_TOTAL;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId)
        {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name)
        {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName)
        {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId()
        {
            return _thriftId;
        }

        public String getFieldName()
        {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __LIMIT_ISSET_ID = 0;
    private static final int __SKIP_ISSET_ID = 1;
    private static final int __NEEDDATALIST_ISSET_ID = 2;
    private static final int __NEEDTOTAL_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    private _Fields optionals[] = { _Fields.LIMIT, _Fields.SKIP, _Fields.NEED_DATA_LIST, _Fields.NEED_TOTAL };
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static
    {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
        tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.SKIP, new org.apache.thrift.meta_data.FieldMetaData("skip", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.NEED_DATA_LIST, new org.apache.thrift.meta_data.FieldMetaData("needDataList",
                org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.BOOL)));
        tmpMap.put(_Fields.NEED_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("needTotal", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PageDto.class, metaDataMap);
    }

    public PageDto()
    {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PageDto(PageDto other)
    {
        __isset_bitfield = other.__isset_bitfield;
        this.limit = other.limit;
        this.skip = other.skip;
        this.needDataList = other.needDataList;
        this.needTotal = other.needTotal;
    }

    public PageDto deepCopy()
    {
        return new PageDto(this);
    }

    @Override
    public void clear()
    {
        setLimitIsSet(false);
        this.limit = 0;
        setSkipIsSet(false);
        this.skip = 0;
        setNeedDataListIsSet(false);
        this.needDataList = false;
        setNeedTotalIsSet(false);
        this.needTotal = false;
    }

    public int getLimit()
    {
        return this.limit;
    }

    public PageDto setLimit(int limit)
    {
        this.limit = limit;
        setLimitIsSet(true);
        return this;
    }

    public void unsetLimit()
    {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit()
    {
        return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value)
    {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public int getSkip()
    {
        return this.skip;
    }

    public PageDto setSkip(int skip)
    {
        this.skip = skip;
        setSkipIsSet(true);
        return this;
    }

    public void unsetSkip()
    {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SKIP_ISSET_ID);
    }

    /** Returns true if field skip is set (has been assigned a value) and false otherwise */
    public boolean isSetSkip()
    {
        return EncodingUtils.testBit(__isset_bitfield, __SKIP_ISSET_ID);
    }

    public void setSkipIsSet(boolean value)
    {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SKIP_ISSET_ID, value);
    }

    public boolean isNeedDataList()
    {
        return this.needDataList;
    }

    public PageDto setNeedDataList(boolean needDataList)
    {
        this.needDataList = needDataList;
        setNeedDataListIsSet(true);
        return this;
    }

    public void unsetNeedDataList()
    {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEEDDATALIST_ISSET_ID);
    }

    /** Returns true if field needDataList is set (has been assigned a value) and false otherwise */
    public boolean isSetNeedDataList()
    {
        return EncodingUtils.testBit(__isset_bitfield, __NEEDDATALIST_ISSET_ID);
    }

    public void setNeedDataListIsSet(boolean value)
    {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEEDDATALIST_ISSET_ID, value);
    }

    public boolean isNeedTotal()
    {
        return this.needTotal;
    }

    public PageDto setNeedTotal(boolean needTotal)
    {
        this.needTotal = needTotal;
        setNeedTotalIsSet(true);
        return this;
    }

    public void unsetNeedTotal()
    {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEEDTOTAL_ISSET_ID);
    }

    /** Returns true if field needTotal is set (has been assigned a value) and false otherwise */
    public boolean isSetNeedTotal()
    {
        return EncodingUtils.testBit(__isset_bitfield, __NEEDTOTAL_ISSET_ID);
    }

    public void setNeedTotalIsSet(boolean value)
    {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEEDTOTAL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value)
    {
        switch (field)
        {
            case LIMIT:
                if (value == null)
                {
                    unsetLimit();
                }
                else
                {
                    setLimit((Integer) value);
                }
                break;

            case SKIP:
                if (value == null)
                {
                    unsetSkip();
                }
                else
                {
                    setSkip((Integer) value);
                }
                break;

            case NEED_DATA_LIST:
                if (value == null)
                {
                    unsetNeedDataList();
                }
                else
                {
                    setNeedDataList((Boolean) value);
                }
                break;

            case NEED_TOTAL:
                if (value == null)
                {
                    unsetNeedTotal();
                }
                else
                {
                    setNeedTotal((Boolean) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field)
    {
        switch (field)
        {
            case LIMIT:
                return Integer.valueOf(getLimit());

            case SKIP:
                return Integer.valueOf(getSkip());

            case NEED_DATA_LIST:
                return Boolean.valueOf(isNeedDataList());

            case NEED_TOTAL:
                return Boolean.valueOf(isNeedTotal());

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field)
    {
        if (field == null)
        {
            throw new IllegalArgumentException();
        }

        switch (field)
        {
            case LIMIT:
                return isSetLimit();
            case SKIP:
                return isSetSkip();
            case NEED_DATA_LIST:
                return isSetNeedDataList();
            case NEED_TOTAL:
                return isSetNeedTotal();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that)
    {
        if (that == null)
            return false;
        if (that instanceof PageDto)
            return this.equals((PageDto) that);
        return false;
    }

    public boolean equals(PageDto that)
    {
        if (that == null)
            return false;

        boolean this_present_limit = true && this.isSetLimit();
        boolean that_present_limit = true && that.isSetLimit();
        if (this_present_limit || that_present_limit)
        {
            if (!(this_present_limit && that_present_limit))
                return false;
            if (this.limit != that.limit)
                return false;
        }

        boolean this_present_skip = true && this.isSetSkip();
        boolean that_present_skip = true && that.isSetSkip();
        if (this_present_skip || that_present_skip)
        {
            if (!(this_present_skip && that_present_skip))
                return false;
            if (this.skip != that.skip)
                return false;
        }

        boolean this_present_needDataList = true && this.isSetNeedDataList();
        boolean that_present_needDataList = true && that.isSetNeedDataList();
        if (this_present_needDataList || that_present_needDataList)
        {
            if (!(this_present_needDataList && that_present_needDataList))
                return false;
            if (this.needDataList != that.needDataList)
                return false;
        }

        boolean this_present_needTotal = true && this.isSetNeedTotal();
        boolean that_present_needTotal = true && that.isSetNeedTotal();
        if (this_present_needTotal || that_present_needTotal)
        {
            if (!(this_present_needTotal && that_present_needTotal))
                return false;
            if (this.needTotal != that.needTotal)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode()
    {
        return 0;
    }

    @Override
    public int compareTo(PageDto other)
    {
        if (!getClass().equals(other.getClass()))
        {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetLimit())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSkip()).compareTo(other.isSetSkip());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetSkip())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skip, other.skip);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetNeedDataList()).compareTo(other.isSetNeedDataList());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetNeedDataList())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needDataList, other.needDataList);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetNeedTotal()).compareTo(other.isSetNeedTotal());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetNeedTotal())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needTotal, other.needTotal);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId)
    {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException
    {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
    {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder("PageDto(");
        boolean first = true;

        if (isSetLimit())
        {
            sb.append("limit:");
            sb.append(this.limit);
            first = false;
        }
        if (isSetSkip())
        {
            if (!first)
                sb.append(", ");
            sb.append("skip:");
            sb.append(this.skip);
            first = false;
        }
        if (isSetNeedDataList())
        {
            if (!first)
                sb.append(", ");
            sb.append("needDataList:");
            sb.append(this.needDataList);
            first = false;
        }
        if (isSetNeedTotal())
        {
            if (!first)
                sb.append(", ");
            sb.append("needTotal:");
            sb.append(this.needTotal);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException
    {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
    {
        try
        {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        }
        catch (org.apache.thrift.TException te)
        {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException
    {
        try
        {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        }
        catch (org.apache.thrift.TException te)
        {
            throw new java.io.IOException(te);
        }
    }

    private static class PageDtoStandardSchemeFactory implements SchemeFactory
    {
        public PageDtoStandardScheme getScheme()
        {
            return new PageDtoStandardScheme();
        }
    }

    private static class PageDtoStandardScheme extends StandardScheme<PageDto>
    {

        public void read(org.apache.thrift.protocol.TProtocol iprot, PageDto struct) throws org.apache.thrift.TException
        {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                {
                    break;
                }
                switch (schemeField.id)
                {
                    case 1: // LIMIT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32)
                        {
                            struct.limit = iprot.readI32();
                            struct.setLimitIsSet(true);
                        }
                        else
                        {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // SKIP
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32)
                        {
                            struct.skip = iprot.readI32();
                            struct.setSkipIsSet(true);
                        }
                        else
                        {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // NEED_DATA_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL)
                        {
                            struct.needDataList = iprot.readBool();
                            struct.setNeedDataListIsSet(true);
                        }
                        else
                        {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // NEED_TOTAL
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL)
                        {
                            struct.needTotal = iprot.readBool();
                            struct.setNeedTotalIsSet(true);
                        }
                        else
                        {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, PageDto struct) throws org.apache.thrift.TException
        {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.isSetLimit())
            {
                oprot.writeFieldBegin(LIMIT_FIELD_DESC);
                oprot.writeI32(struct.limit);
                oprot.writeFieldEnd();
            }
            if (struct.isSetSkip())
            {
                oprot.writeFieldBegin(SKIP_FIELD_DESC);
                oprot.writeI32(struct.skip);
                oprot.writeFieldEnd();
            }
            if (struct.isSetNeedDataList())
            {
                oprot.writeFieldBegin(NEED_DATA_LIST_FIELD_DESC);
                oprot.writeBool(struct.needDataList);
                oprot.writeFieldEnd();
            }
            if (struct.isSetNeedTotal())
            {
                oprot.writeFieldBegin(NEED_TOTAL_FIELD_DESC);
                oprot.writeBool(struct.needTotal);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class PageDtoTupleSchemeFactory implements SchemeFactory
    {
        public PageDtoTupleScheme getScheme()
        {
            return new PageDtoTupleScheme();
        }
    }

    private static class PageDtoTupleScheme extends TupleScheme<PageDto>
    {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, PageDto struct) throws org.apache.thrift.TException
        {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetLimit())
            {
                optionals.set(0);
            }
            if (struct.isSetSkip())
            {
                optionals.set(1);
            }
            if (struct.isSetNeedDataList())
            {
                optionals.set(2);
            }
            if (struct.isSetNeedTotal())
            {
                optionals.set(3);
            }
            oprot.writeBitSet(optionals, 4);
            if (struct.isSetLimit())
            {
                oprot.writeI32(struct.limit);
            }
            if (struct.isSetSkip())
            {
                oprot.writeI32(struct.skip);
            }
            if (struct.isSetNeedDataList())
            {
                oprot.writeBool(struct.needDataList);
            }
            if (struct.isSetNeedTotal())
            {
                oprot.writeBool(struct.needTotal);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, PageDto struct) throws org.apache.thrift.TException
        {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(4);
            if (incoming.get(0))
            {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
            }
            if (incoming.get(1))
            {
                struct.skip = iprot.readI32();
                struct.setSkipIsSet(true);
            }
            if (incoming.get(2))
            {
                struct.needDataList = iprot.readBool();
                struct.setNeedDataListIsSet(true);
            }
            if (incoming.get(3))
            {
                struct.needTotal = iprot.readBool();
                struct.setNeedTotalIsSet(true);
            }
        }
    }

}
